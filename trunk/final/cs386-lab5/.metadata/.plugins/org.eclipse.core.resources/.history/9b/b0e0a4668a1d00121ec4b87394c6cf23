package helpers;

import java.util.List;

public class Character {
	
	public enum Race{
		Human, Elf, Dwarf, Hobbit, Gnome
	}
	
	//character ID - primary key
	private int ID;
	
	//character name
	private String name;
	
	//character race
	private Race race;
	
	//character age
	private int age;
	
	//character model
	private String model;
	
	//character strength
	private int strength;
	
	//character constitution
	private int constitution;
	
	//character intelligence
	private int intelligence;
	
	//character wisdom
	private int wisdom;
	
	//character agility
	private int agility;
	
	//character dexterity
	private int dexterity;
	
	//character level
	private int level;
	
	//character experience
	private int experience;
	
	//owner account id
	private int accountID;
	
	/**
	 * private Constructor
	 */
	private Character(int ID, String name, Race race, int age, String model, int strength,
			int constitution, int intelligence, int wisdom, int agility, int dexterity, int level, int experience, int accountID){
		this.ID = ID;
		this.name = name;
		this.race = race;
		this.age = age;
		this.model = model;
		this.strength = strength;
		this.constitution = constitution;
		this.intelligence = intelligence;
		this.wisdom = wisdom;
		this.agility = agility;
		this.dexterity = dexterity;
		this.level = level;
		this.experience = experience;
		this.accountID = accountID;
	}
	
	/**
	 * factory method to add character to database by account ID
	 * @param accountID
	 * @param name
	 * @param race
	 * @param age
	 * @param model
	 * @param strength
	 * @param constitution
	 * @param intelligence
	 * @param wisdom
	 * @param agility
	 * @param dexterity
	 * @param level
	 * @param experience
	 * @return - true if added else false
	 */
	public static boolean addCharacter(int accountID, String name, Race race, int age, String model, int strength,
			int constitution, int intelligence, int wisdom, int agility, int dexterity, int level, int experience){
		boolean added = false;
		int id = getNewID();
		//TODO sql command to add char to db set added = true if added
		//no duplicate character names on same account, enforced in code here
		return added;
	}
	
	/**
	 * delete character by ID
	 * @param ID
	 * @return - true if deleted else false
	 */
	public static boolean deleteCharacter(int ID){
		boolean deleted = false;
		//TODO sql to delete char by ID
		return deleted;
	}
	
	/**
	 * find character by id
	 * @param ID
	 * @return
	 */
	public static Character findCharacter(int ID){
		Character result = null;
		//TODO sql command to find char by ID
		return result;
	}
	
	/**
	 * find all character with name
	 * @param name
	 * @return
	 */
	public static List<Character> findCharacters(String name){
		List<Character> results = null;
		//TODO sql command to find all chars by name
		return results;
	}
	
	/**
	 * increment age of character +1
	 * @return - true if success else false
	 */
	public boolean incrementAge(){
		boolean incremented = false;
		//TODO sql command to increment age + 1 in database
		//if successful this.age++ and incremented = true
		return incremented;
	}
	
	public static boolean alterStats(int id, int strength, int constitution, int )
	
	/**
	 * finds next unused ID for primary key
	 * @return - next valid new id key
	 */
	private static int getNewID(){
		int id = 1;
		//TODO sql command to get collection of all used IDs
		//while collection contains(id){ id++}
		return id;
	}
	
	//***Public Accessors***//
	public int getID(){
		return this.ID;
	}
	
	public String getName(){
		return this.name;
	}
	
	public String getRace(){
		return this.race.toString();
	}
	
	public int getAge(){
		return this.age;
	}
	
	public String getModel(){
		return this.model;
	}
	
	public int getStrength(){
		return this.strength;
	}
	
	public int getConstitution(){
		return this.constitution;
	}
	
	public int getIntelligence(){
		return this.intelligence;
	}
	
	public int getWisdom(){
		return this.wisdom;
	}
	
	public int getAgility(){
		return this.agility;
	}
	
	public int getDexterity(){
		return this.dexterity;
	}
	
	public int getLevel(){
		return this.level;
	}
	
	public int getExperience(){
		return this.experience;
	}
	
	public Account getAccount(){
		Account parentAccount = null;
		//TODO add find account static method
		return parentAccount;
	}
	
	public int getAccountID(){
		return this.accountID;
	}
}
